import {
  ar_nums,
  cn,
  en_nums
} from "./chunk-JGOHEBIE.js";
import "./chunk-LOQCC4GI.js";
import "./chunk-DGGOEIR5.js";
import {
  add_locations,
  attribute_effect,
  check_target,
  hmr,
  legacy_api,
  prop,
  remove_input_defaults,
  rest_props
} from "./chunk-C6YOTZOX.js";
import "./chunk-DEX2RCYB.js";
import {
  append,
  from_html
} from "./chunk-ZIKMPK4Z.js";
import {
  FILENAME,
  HMR,
  pop,
  push,
  set,
  strict_equals
} from "./chunk-CTXEGWMH.js";
import "./chunk-BWOAGXLU.js";
import "./chunk-X6RB6SXC.js";
import "./chunk-CJAOI65P.js";
import "./chunk-KWPVD4H7.js";

// node_modules/.pnpm/es-toolkit@1.39.4/node_modules/es-toolkit/dist/function/partial.mjs
function partial(func, ...partialArgs) {
  return partialImpl(func, placeholderSymbol, ...partialArgs);
}
function partialImpl(func, placeholder, ...partialArgs) {
  const partialed = function(...providedArgs) {
    let providedArgsIndex = 0;
    const substitutedArgs = partialArgs.slice().map((arg) => arg === placeholder ? providedArgs[providedArgsIndex++] : arg);
    const remainingArgs = providedArgs.slice(providedArgsIndex);
    return func.apply(this, substitutedArgs.concat(remainingArgs));
  };
  if (func.prototype) {
    partialed.prototype = Object.create(func.prototype);
  }
  return partialed;
}
var placeholderSymbol = Symbol("partial.placeholder");
partial.placeholder = placeholderSymbol;

// node_modules/.pnpm/es-toolkit@1.39.4/node_modules/es-toolkit/dist/function/partialRight.mjs
function partialRight(func, ...partialArgs) {
  return partialRightImpl(func, placeholderSymbol2, ...partialArgs);
}
function partialRightImpl(func, placeholder, ...partialArgs) {
  const partialedRight = function(...providedArgs) {
    const placeholderLength = partialArgs.filter((arg) => arg === placeholder).length;
    const rangeLength = Math.max(providedArgs.length - placeholderLength, 0);
    const remainingArgs = providedArgs.slice(0, rangeLength);
    let providedArgsIndex = rangeLength;
    const substitutedArgs = partialArgs.slice().map((arg) => arg === placeholder ? providedArgs[providedArgsIndex++] : arg);
    return func.apply(this, remainingArgs.concat(substitutedArgs));
  };
  if (func.prototype) {
    partialedRight.prototype = Object.create(func.prototype);
  }
  return partialedRight;
}
var placeholderSymbol2 = Symbol("partialRight.placeholder");
partialRight.placeholder = placeholderSymbol2;

// node_modules/.pnpm/es-toolkit@1.39.4/node_modules/es-toolkit/dist/function/retry.mjs
var DEFAULT_RETRIES = Number.POSITIVE_INFINITY;

// node_modules/.pnpm/es-toolkit@1.39.4/node_modules/es-toolkit/dist/math/clamp.mjs
function clamp(value, bound1, bound2) {
  if (bound2 == null) {
    return Math.min(value, bound1);
  }
  return Math.min(Math.max(value, bound1), bound2);
}

// node_modules/.pnpm/es-toolkit@1.39.4/node_modules/es-toolkit/dist/string/words.mjs
var CASE_SPLIT_PATTERN = new RegExp("\\p{Lu}?\\p{Ll}+|[0-9]+|\\p{Lu}+(?!\\p{Ll})|\\p{Emoji_Presentation}|\\p{Extended_Pictographic}|\\p{L}+", "gu");

// node_modules/.pnpm/es-toolkit@1.39.4/node_modules/es-toolkit/dist/string/deburr.mjs
var deburrMap = new Map(Object.entries({
  Æ: "Ae",
  Ð: "D",
  Ø: "O",
  Þ: "Th",
  ß: "ss",
  æ: "ae",
  ð: "d",
  ø: "o",
  þ: "th",
  Đ: "D",
  đ: "d",
  Ħ: "H",
  ħ: "h",
  ı: "i",
  Ĳ: "IJ",
  ĳ: "ij",
  ĸ: "k",
  Ŀ: "L",
  ŀ: "l",
  Ł: "L",
  ł: "l",
  ŉ: "'n",
  Ŋ: "N",
  ŋ: "n",
  Œ: "Oe",
  œ: "oe",
  Ŧ: "T",
  ŧ: "t",
  ſ: "s"
}));

// node_modules/.pnpm/components@https+++codeload.github.com+nuqayah+components+tar.gz+refs+tags+v2.0.49/node_modules/components/src/NumberInput.svelte
NumberInput[FILENAME] = "node_modules/.pnpm/components@https+++codeload.github.com+nuqayah+components+tar.gz+refs+tags+v2.0.49/node_modules/components/src/NumberInput.svelte";
var root = add_locations(from_html(`<input/>`), NumberInput[FILENAME], [[1, 0]]);
function NumberInput($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NumberInput);
  let value = prop($$props, "value", 15, 1), min = prop($$props, "min", 3, 1), max = prop($$props, "max", 3, 100), id = prop($$props, "id", 3, ""), class_name = prop($$props, "class", 3, ""), inputmode = prop($$props, "inputmode", 3, "numeric"), pattern = prop($$props, "pattern", 3, "[\\d٠-٩]+"), oninput = prop($$props, "oninput", 3, (val) => {
  }), onpreinput = prop($$props, "onpreinput", 3, (val) => true), is_valid = prop($$props, "is_valid", 15, true), disabled = prop($$props, "disabled", 3, false), display_value = prop($$props, "display_value", 15, ""), placeholder = prop($$props, "placeholder", 3, void 0), default_value = prop($$props, "default_value", 3, 1), get_max_value = prop($$props, "get_max_value", 3, () => max()), handle_arrow_navigation = prop($$props, "handle_arrow_navigation", 3, null), rest2 = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "min",
      "max",
      "id",
      "class",
      "inputmode",
      "pattern",
      "oninput",
      "onpreinput",
      "is_valid",
      "disabled",
      "display_value",
      "placeholder",
      "default_value",
      "get_max_value",
      "handle_arrow_navigation"
    ],
    "rest"
  );
  function handle_keydown(e) {
    if (strict_equals(e.key, "ArrowUp", false) && strict_equals(e.key, "ArrowDown", false)) return;
    e.preventDefault();
    const current = value() ?? min();
    if (handle_arrow_navigation() && handle_arrow_navigation()(e.key, current)) {
      return;
    }
    const current_max = get_max_value()();
    const delta = strict_equals(e.key, "ArrowUp") ? 1 : -1;
    const new_value = clamp(current + delta, min(), current_max);
    onpreinput()(new_value);
    value(new_value);
    is_valid(true);
    oninput()(new_value);
    display_value(ar_nums(new_value.toString()));
  }
  function handle_change(e) {
    const raw_input = e.currentTarget.value.trim();
    display_value(ar_nums(raw_input));
    if (!raw_input) {
      onpreinput()(default_value());
      value(default_value());
      is_valid(false);
      oninput()(default_value());
      return;
    }
    const input_value = en_nums(raw_input);
    const parsed_value = parseInt(input_value, 10);
    if (isNaN(parsed_value)) {
      onpreinput()(default_value());
      value(default_value());
      is_valid(false);
      oninput()(default_value());
      return;
    }
    const current_max = get_max_value()();
    if (parsed_value < min() || parsed_value > current_max) {
      onpreinput()(default_value());
      value(default_value());
      is_valid(false);
      oninput()(default_value());
      return;
    }
    onpreinput()(parsed_value);
    is_valid(true);
    value(parsed_value);
    oninput()(parsed_value);
    display_value(ar_nums(parsed_value.toString()));
  }
  var input = root();
  remove_input_defaults(input);
  attribute_effect(
    input,
    ($0) => ({
      id: id(),
      inputmode: inputmode(),
      pattern: pattern(),
      autocomplete: "off",
      type: "text",
      value: display_value(),
      oninput: handle_change,
      onkeydown: handle_keydown,
      placeholder: placeholder(),
      disabled: disabled(),
      class: $0,
      ...rest2
    }),
    [
      () => cn("rounded border px-2.5 py-2 text-base transition-all duration-150 ease-in-out focus:outline-none disabled:bg-gray-100", is_valid() ? "border-gray-300 bg-white text-gray-700" : "border-red-500 bg-red-50 text-red-900 placeholder-red-700 focus:border-red-500 focus:ring-red-500", class_name())
    ]
  );
  append($$anchor, input);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NumberInput = hmr(NumberInput, () => NumberInput[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NumberInput[HMR].source;
    set(NumberInput[HMR].source, module.default[HMR].original);
  });
}
var NumberInput_default = NumberInput;
export {
  NumberInput_default as default
};
//# sourceMappingURL=components_src_NumberInput__svelte.js.map
